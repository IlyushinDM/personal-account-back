// Не добавлять в .gitignore! Очень полезно
{
    "editor.rulers": [120],
    "workbench.colorCustomizations": {
        "editorRuler.foreground": "#5dc1ef77"
    },

    "editor.formatOnSave": false,

    "files.exclude": {
        "**/.git": true,
        "**/.svn": true,
        "**/.hg": true,
        "**/CVS": true,
        "**/.DS_Store": true,
        "**/tmp": true,
        "**/dist": true,
        "**/bin": true
    },
    
  // ===================================================================
  // СПЕЦИФИЧНЫЕ НАСТРОЙКИ ДЛЯ GO ([go])
  // Эти настройки применяются только к файлам с расширением .go
  // ===================================================================
  "[go]": {
    // Включает форматирование файла при каждом сохранении.
    "editor.formatOnSave": true,

    // Устанавливает расширение Go как форматер по умолчанию.
    // Это позволяет gopls управлять форматированием.
    "editor.defaultFormatter": "golang.go",

    // Включает "умные" подсказки, которые предлагают автодополнение
    // на основе контекста, а не только по алфавиту.
    "editor.snippetSuggestions": "inline",

    // Определяет действия, которые будут выполняться при сохранении файла.
    "editor.codeActionsOnSave": {
      // Автоматически организует (добавляет/удаляет) импорты.
      // Это одна из самых полезных функций для Go.
      "source.organizeImports": "explicit"
    }
  },

  // ===================================================================
  // НАСТРОЙКИ РАСШИРЕНИЯ GO
  // ===================================================================

  // Включает автоматическое обновление инструментов Go.
  "go.toolsManagement.autoUpdate": true,

  // Явно указывает на использование языкового сервера `gopls`. [9]
  // Это обеспечивает лучшую производительность для автодополнения,
  // навигации по коду и поиска ошибок.
  "go.useLanguageServer": true,

  // Инструмент для форматирования. Рекомендуется 'goimports', который
  // не только форматирует код (как gofmt), но и управляет импортами.
  "go.formatTool": "goimports",

  // Инструмент для линтинга (поиска стилистических и потенциальных ошибок).
  // `golangci-lint` является мощным и быстрым агрегатором множества линтеров. [5]
  "go.lintTool": "golangci-lint",

  // Запускать линтер при сохранении. Значение "workspace" проверяет весь проект. [5]
  "go.lintOnSave": "workspace",

  // Флаги для `golangci-lint` для ускорения работы.
  "go.lintFlags": ["--fast"],

  // Отключаем проверку покрытия тестами при сохранении, чтобы не замедлять работу.
  "go.coverOnSave": false,

  // Включает подсказки (inlay hints) для более ясного отображения типов. [15]
  // Это может быть очень полезно для понимания кода.
  "go.inlayHints.parameterNames": true,
  "go.inlayHints.rangeVariableTypes": true,
  "go.inlayHints.functionTypeParameters": true,
  "go.inlayHints.compositeLiteralTypes": true,

  // ===================================================================
  // НАСТРОЙКИ ЯЗЫКОВОГО СЕРВЕРА GOPLS
  // `gopls` — это "мозг" поддержки Go в VS Code. [5]
  // ===================================================================
  "gopls": {
    // Включает семантическое выделение синтаксиса для более точной
    // и информативной подсветки кода. [4, 6]
    "ui.semanticTokens": true,

    // Использование `gofumpt` для форматирования. Это более строгий
    // вариант `gofmt`, который обеспечивает большую консистентность кода. [6]
    "formatting.gofumpt": true,

    // Включает использование плейсхолдеров в автодополнении для
    // быстрой навигации по параметрам функций. [6]
    "usePlaceholders": true,

    // Автоматически анализирует зависимости, чтобы улучшить производительность.
    "build.buildFlags": ["-tags=integration"],

    // Включает статический анализ кода для поиска проблем.
    // Может быть ресурсоемким, можно отключить при проблемах с производительностью.
    "staticcheck": true
  }
}